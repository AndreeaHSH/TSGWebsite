// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TSGwebsite.Data;

#nullable disable

namespace TSGwebsite.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250729164829_AddMemberReportingSystem")]
    partial class AddMemberReportingSystem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TSGwebsite.Models.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeaturedImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("TSGwebsite.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GitHubUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LinkedInUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Department = "Management",
                            Email = "augustin.matea@example.com",
                            FirstName = "Augustin",
                            IsActive = true,
                            JoinedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Matea",
                            Role = "Founder"
                        },
                        new
                        {
                            Id = 2,
                            Department = "Management",
                            Email = "daia.irimia@example.com",
                            FirstName = "Daia",
                            IsActive = true,
                            JoinedAt = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Irimia",
                            Role = "Coordinator"
                        },
                        new
                        {
                            Id = 3,
                            Department = "Frontend",
                            Email = "andrei.constantin@example.com",
                            FirstName = "Andrei",
                            IsActive = true,
                            JoinedAt = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Constantin",
                            Role = "Lead"
                        },
                        new
                        {
                            Id = 4,
                            Department = "FullStack",
                            Email = "daniel.nwaeke@example.com",
                            FirstName = "Daniel",
                            IsActive = true,
                            JoinedAt = new DateTime(2021, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Nwaeke",
                            Role = "Member"
                        },
                        new
                        {
                            Id = 5,
                            Department = "Mobile",
                            Email = "cristina.gavrila@example.com",
                            FirstName = "Cristina",
                            IsActive = true,
                            JoinedAt = new DateTime(2021, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Gavrilă",
                            Role = "Lead"
                        },
                        new
                        {
                            Id = 6,
                            Department = "GraphicDesign",
                            Email = "bianca.popescu@example.com",
                            FirstName = "Bianca",
                            IsActive = true,
                            JoinedAt = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Popescu",
                            Role = "Member"
                        },
                        new
                        {
                            Id = 7,
                            Department = "Backend",
                            Email = "eduard.marinescu@example.com",
                            FirstName = "Eduard",
                            IsActive = true,
                            JoinedAt = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Marinescu",
                            Role = "Lead"
                        },
                        new
                        {
                            Id = 8,
                            Department = "Communication",
                            Email = "iulia.ionescu@example.com",
                            FirstName = "Iulia",
                            IsActive = true,
                            JoinedAt = new DateTime(2022, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Ionescu",
                            Role = "Member"
                        },
                        new
                        {
                            Id = 9,
                            Department = "Networking",
                            Email = "victor.stanciu@example.com",
                            FirstName = "Victor",
                            IsActive = true,
                            JoinedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Stanciu",
                            Role = "Member"
                        },
                        new
                        {
                            Id = 10,
                            Department = "Frontend",
                            Email = "alexandra.terechoasa@example.com",
                            FirstName = "Alexandra",
                            IsActive = true,
                            JoinedAt = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Terechoasă",
                            Role = "Member"
                        });
                });

            modelBuilder.Entity("TSGwebsite.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BeginnerMemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExecutorMemberId")
                        .HasColumnType("int");

                    b.Property<string>("LiveUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RepositoryUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ResponsibleMemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BeginnerMemberId");

                    b.HasIndex("ExecutorMemberId");

                    b.HasIndex("ResponsibleMemberId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6502),
                            Description = "Official website for Transilvania Star Group",
                            ExecutorMemberId = 4,
                            Name = "TSG Website",
                            ResponsibleMemberId = 3,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "InProgress",
                            UpdatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6500)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6506),
                            Description = "Portal for student management and services",
                            ExecutorMemberId = 5,
                            Name = "Student Portal",
                            ResponsibleMemberId = 7,
                            StartDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Planning",
                            UpdatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6505)
                        },
                        new
                        {
                            Id = 3,
                            BeginnerMemberId = 10,
                            CreatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6508),
                            Description = "TSG mobile application for students",
                            Name = "Mobile App",
                            ResponsibleMemberId = 5,
                            StartDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "InProgress",
                            UpdatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6507)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6510),
                            Description = "Document management system for university",
                            ExecutorMemberId = 4,
                            Name = "Registratură",
                            ResponsibleMemberId = 7,
                            StartDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Testing",
                            UpdatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6509)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6512),
                            Description = "Social media and communication strategy",
                            Name = "Marketing Campaign",
                            ResponsibleMemberId = 8,
                            StartDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "InProgress",
                            UpdatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6511)
                        });
                });

            modelBuilder.Entity("TSGwebsite.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Achievements")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Challenges")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HoursWorked")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("NextMonthPlans")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkDescription")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("MemberId", "ProjectId", "Month", "Year")
                        .IsUnique();

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Achievements = "Completed responsive design implementation",
                            CreatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6604),
                            HoursWorked = 40,
                            MemberId = 3,
                            Month = 7,
                            ProjectId = 1,
                            UpdatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6601),
                            WorkDescription = "Developed new frontend components and improved UI/UX",
                            Year = 2025
                        },
                        new
                        {
                            Id = 2,
                            Achievements = "Improved API performance by 30%",
                            CreatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6606),
                            HoursWorked = 35,
                            MemberId = 4,
                            Month = 7,
                            ProjectId = 1,
                            UpdatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6605),
                            WorkDescription = "Backend API development and database optimization",
                            Year = 2025
                        },
                        new
                        {
                            Id = 3,
                            Achievements = "Completed authentication module",
                            CreatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6609),
                            HoursWorked = 45,
                            MemberId = 5,
                            Month = 7,
                            ProjectId = 3,
                            UpdatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6607),
                            WorkDescription = "Mobile app development using React Native",
                            Year = 2025
                        },
                        new
                        {
                            Id = 4,
                            Achievements = "Completed project architecture documentation",
                            CreatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6611),
                            HoursWorked = 30,
                            MemberId = 7,
                            Month = 7,
                            ProjectId = 2,
                            UpdatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6610),
                            WorkDescription = "Architecture planning and backend setup",
                            Year = 2025
                        },
                        new
                        {
                            Id = 5,
                            Achievements = "Increased social media engagement by 50%",
                            CreatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6613),
                            HoursWorked = 25,
                            MemberId = 8,
                            Month = 7,
                            ProjectId = 5,
                            UpdatedAt = new DateTime(2025, 7, 29, 16, 48, 28, 910, DateTimeKind.Utc).AddTicks(6612),
                            WorkDescription = "Content creation and social media management",
                            Year = 2025
                        });
                });

            modelBuilder.Entity("TSGwebsite.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TSGwebsite.Models.Volunteer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Achievements")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("AlternativeRole")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ContactedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Contribution")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("CurrentRole")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CvFileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CvFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("CvFileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("DataProcessingAgreement")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Experience")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Faculty")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("FavoritedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Frameworks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Motivation")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PortfolioUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PreferredRole")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProgrammingLanguages")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ReviewNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Schedule")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("StartedVolunteeringAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StudyYear")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TermsAgreement")
                        .HasColumnType("bit");

                    b.Property<string>("TimeCommitment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Tools")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("VolunteerHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("TSGwebsite.Models.Project", b =>
                {
                    b.HasOne("TSGwebsite.Models.Member", "BeginnerMember")
                        .WithMany("BeginnerProjects")
                        .HasForeignKey("BeginnerMemberId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TSGwebsite.Models.Member", "ExecutorMember")
                        .WithMany("ExecutorProjects")
                        .HasForeignKey("ExecutorMemberId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TSGwebsite.Models.Member", "ResponsibleMember")
                        .WithMany("ResponsibleProjects")
                        .HasForeignKey("ResponsibleMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BeginnerMember");

                    b.Navigation("ExecutorMember");

                    b.Navigation("ResponsibleMember");
                });

            modelBuilder.Entity("TSGwebsite.Models.Report", b =>
                {
                    b.HasOne("TSGwebsite.Models.Member", "Member")
                        .WithMany("Reports")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TSGwebsite.Models.Project", "Project")
                        .WithMany("Reports")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TSGwebsite.Models.Member", b =>
                {
                    b.Navigation("BeginnerProjects");

                    b.Navigation("ExecutorProjects");

                    b.Navigation("Reports");

                    b.Navigation("ResponsibleProjects");
                });

            modelBuilder.Entity("TSGwebsite.Models.Project", b =>
                {
                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
